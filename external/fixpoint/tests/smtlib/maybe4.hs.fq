//qualif NonNull(v: [a])        : (? (nonnull([v])))
//qualif Null(v: [a])           : (~ (? (nonnull([v]))))
//qualif EqNull(v:Bool, ~A: [a]): (Prop(v) <=> (? (nonnull([~A]))))

qualif IsEmp(v:Bool, ~A: [a]) : (Prop(v) <=> len([~A]) [ > ;  = ] 0)
qualif ListZ(v: [a])          : len([v]) [ = ; >= ; > ] 0 
qualif SameLen(v:[a], ~A:[b]) : len([v]) = len([~A]) 
qualif EqLen(v:int, ~A: [a])  : v = len([~A]) 
qualif LenEq(v:[a], ~A: int)  : ~A = len([v]) 
qualif LenAcc(v:int, ~A:[a], ~B: int): v = len([~A]) + ~B
qualif LenDiff(v:[a], ~A:int): len([v]) = (~A [ +; - ] 1)
//BOT: Do not delete EVER!

qualif Bot(v:@(0))    : 0 = 1 
qualif Bot(v:obj)     : 0 = 1 
qualif Bot(v:a)       : 0 = 1 
qualif Bot(v:bool)    : 0 = 1 
qualif Bot(v:int)     : 0 = 1 
qualif CmpZ(v:a)      : v [ < ; <= ; > ; >= ; = ; != ] 0
qualif Cmp(v:a,~A:a)  : v [ < ; <= ; > ; >= ; = ; != ] ~A
qualif One(v:int)     : v = 1
qualif True(v:bool)   : (? v) 
qualif False(v:bool)  : ~ (? v) 
qualif True1(v:Bool)   : Prop(v) 
qualif False1(v:Bool)  : ~ Prop(v) 


qualif Papp(v:a,~P:Pred a) : papp1(~P, v)
constant papp1 : func(2, [Pred @(0); @(1); bool])

qualif Papp2(v:a,~X:b,~P:Pred a b) : papp2(~P, v, ~X)
constant papp2 : func(4, [Pred @(0) @(1); @(2); @(3); bool])

constant Prop : func(0, [Bool; bool])
qualif Auto(v0a : Maybe a_abS): true
qualif Auto(VV : a_abS , ~A0 : Maybe a_abS): (? isJust([~A0]))
qualif Auto(VV : a_abS , ~A0 : Maybe a_abS): (VV = fromJust([~A0]))
qualif Auto(v0b : Maybe a_abS , ~A0 : Maybe a_abS): (&& [(? isJust([~A0]));
                                                         (? isJust([v0b]))] => (fromJust([v0b]) >= fromJust([~A0])))
qualif Auto(VV : a_abS , ~A0 : Maybe a_abS): (? isJust([~A0]))
qualif Auto(VV : a_abS , ~A0 : Maybe a_abS): (VV = fromJust([~A0]))
qualif Auto(VV : a_abQ , ~A0 : Maybe a_abQ): ((? isJust([~A0])) => (VV <= fromJust([~A0])))
constant cmp : func(0, [Ordering; Ordering])
constant fromJust : func(1, [Maybe @(0); @(0)])
constant isJust : func(1, [Maybe @(0); bool])
constant len : func(1, [[@(0)]; int])
bind 0 True#6u : {VV#3 : Bool | []}
bind 1 True#6u : {VV#6 : Bool | [(? Prop([VV#6]))]}
bind 2 GT#6W : {VV#15 : Ordering | [(cmp([VV#15]) = GT#6W)]}
bind 3 LT#6S : {VV#17 : Ordering | [(cmp([VV#17]) = LT#6S)]}
bind 4 EQ#6U : {VV#19 : Ordering | [(cmp([VV#19]) = EQ#6U)]}
bind 5 hi#abI : {VV#23 : Maybe a_abQ | [k_24]}
bind 6 lo#abJ : {VV#28 : Maybe a_abQ | [k_29]}
bind 7 lo#abG : {VV#33 : Maybe a_abS | [k_34]}
bind 8 hi#abH : {VV#38 : Maybe a_abS | [k_39]}
bind 9 lq_anf__dbV : {VV#45 : Maybe a_abS | [k_46[x:=hi#abH];
                                             (VV#45 = hi#abH)]}
bind 10 lq_anf__dbW : {VV#50 : Maybe a_abS | [k_51[x:=lo#abG];
                                              (VV#50 = lo#abG)]}
bind 11 VV#55 : {VV#55 : Maybe a_abS | [true]}
bind 12 lo : {v0a : Maybe a_abS | [true]}
bind 13 VV#58 : {VV#58 : Maybe a_abS | [(&& [(? isJust([lo]));
                                             (? isJust([VV#58]))] => (fromJust([VV#58]) >= fromJust([lo])))]}
bind 14 hi : {v0b : Maybe a_abS | [(&& [(? isJust([lo]));
                                        (? isJust([v0b]))] => (fromJust([v0b]) >= fromJust([lo])))]}
bind 15 VV#61 : {VV#61 : Bool | [k_42[lo#abG:=lo][hi#abH:=hi][VV#41:=VV#61]]}
bind 16 VV#63 : {VV#63 : Bool | []}
bind 17 VV#65 : {VV#65 : Maybe a_abS | [k_51[x:=lo#abG][VV#50:=VV#65];
                                        (VV#65 = lo#abG);
                                        (VV#65 = lq_anf__dbW)]}
bind 18 VV#67 : {VV#67 : Maybe a_abS | [k_46[x:=hi#abH][VV#45:=VV#67];
                                        (VV#67 = hi#abH);
                                        (VV#67 = lq_anf__dbV)]}
bind 19 VV#69 : {VV#69 : Maybe a_abS | [k_34[VV#33:=VV#69];
                                        (VV#69 = lo#abG)]}
bind 20 VV#71 : {VV#71 : Maybe a_abS | [k_39[VV#38:=VV#71];
                                        (VV#71 = hi#abH)]}
bind 21 VV#73 : {VV#73 : Maybe a_abQ | []}
bind 22 hi : {VV#75 : Maybe a_abQ | []}
bind 23 VV#76 : {VV#76 : Maybe a_abQ | []}
bind 24 lo : {_LIQUID_dummy : Maybe a_abQ | []}
bind 25 VV#79 : {VV#79 : Bool | [(? Prop([VV#79]));
                                 (VV#79 = True#6u)]}
bind 26 VV#33 : {VV#33 : Maybe a_abS | [k_34]}
bind 27 VV#38 : {VV#38 : Maybe a_abS | [k_39]}
bind 28 VV#50 : {VV#50 : Maybe a_abS | [k_51]}
bind 29 VV#45 : {VV#45 : Maybe a_abS | [k_46]}
bind 30 VV#41 : {VV#41 : Bool | [k_42]}
bind 31 VV#23 : {VV#23 : Maybe a_abQ | [k_24]}
bind 32 VV#28 : {VV#28 : Maybe a_abQ | [k_29]}


constraint:
  env [0; 1; 2; 3; 4]
  grd true
  lhs {VV#F1 : Maybe a_abS | [true]}
  rhs {VV#F1 : Maybe a_abS | [k_34[VV#33:=VV#F1][VV#55:=VV#F1][VV#F:=VV#F1]]}
  id 1 tag [2]


constraint:
  env [0; 1; 2; 3; 4; 11]
  grd true
  lhs {VV#F2 : a_abS | [&& [(? isJust([VV#55]));
                            (VV#F2 = fromJust([VV#55]))]]}
  rhs {VV#F2 : a_abS | [k_32[VV#33:=VV#55][VV#31:=VV#F2][VV#F:=VV#F2]]}
  id 2 tag [2]


constraint:
  env [0; 1; 2; 3; 4; 12]
  grd true
  lhs {VV#F3 : Maybe a_abS | [(&& [(? isJust([lo]));
                                   (? isJust([VV#F3]))] => (fromJust([VV#F3]) >= fromJust([lo])))]}
  rhs {VV#F3 : Maybe a_abS | [k_39[lo#abG:=lo][VV#38:=VV#F3][VV#58:=VV#F3][VV#F:=VV#F3]]}
  id 3 tag [2]


constraint:
  env [0; 1; 2; 3; 4; 12; 13]
  grd true
  lhs {VV#F4 : a_abS | [&& [(? isJust([VV#58]));
                            (VV#F4 = fromJust([VV#58]))]]}
  rhs {VV#F4 : a_abS | [k_37[lo#abG:=lo][VV#38:=VV#58][VV#36:=VV#F4][VV#F:=VV#F4]]}
  id 4 tag [2]


constraint:
  env [0; 1; 2; 3; 4; 7; 8; 9; 10]
  grd true
  lhs {VV#F5 : Bool | []}
  rhs {VV#F5 : Bool | [k_42[VV#41:=VV#F5][VV#63:=VV#F5][VV#F:=VV#F5]]}
  id 5 tag [2]


constraint:
  env [0; 1; 17; 2; 3; 4; 7; 8; 9; 10]
  grd true
  lhs {VV#F6 : a_abS | [k_49[x:=lo#abG][VV#50:=VV#65][VV#48:=VV#F6][VV#F:=VV#F6]]}
  rhs {VV#F6 : a_abS | [k_54[hi:=lq_anf__dbV][_LIQUID_dummy:=VV#65][VV#53:=VV#F6][VV#F:=VV#F6];
                        ((? isJust([lq_anf__dbV])) => (VV#F6 <= fromJust([lq_anf__dbV])))]}
  id 6 tag [2]


constraint:
  env [0; 1; 2; 18; 3; 4; 7; 8; 9; 10]
  grd true
  lhs {VV#F7 : a_abS | [k_44[x:=hi#abH][VV#45:=VV#67][VV#43:=VV#F7][VV#F:=VV#F7]]}
  rhs {VV#F7 : a_abS | [k_54[VV:=VV#67][VV#53:=VV#F7][VV#F:=VV#F7]]}
  id 7 tag [2]


constraint:
  env [0; 1; 2; 3; 4; 7; 8; 9]
  grd true
  lhs {VV#F8 : Maybe a_abS | [k_34[VV#33:=VV#F8][VV#69:=VV#F8][VV#F:=VV#F8];
                              (VV#F8 = lo#abG)]}
  rhs {VV#F8 : Maybe a_abS | [k_51[VV#50:=VV#F8][VV#69:=VV#F8][VV#F:=VV#F8]]}
  id 8 tag [2]


constraint:
  env [0; 1; 2; 3; 19; 4; 7; 8; 9]
  grd true
  lhs {VV#F9 : a_abS | [k_32[VV#33:=VV#69][VV#31:=VV#F9][VV#F:=VV#F9]]}
  rhs {VV#F9 : a_abS | [k_49[VV#50:=VV#69][VV#48:=VV#F9][VV#F:=VV#F9]]}
  id 9 tag [2]


constraint:
  env [0; 1; 2; 3; 4; 7; 8]
  grd true
  lhs {VV#F10 : Maybe a_abS | [k_39[VV#38:=VV#F10][VV#71:=VV#F10][VV#F:=VV#F10];
                               (VV#F10 = hi#abH)]}
  rhs {VV#F10 : Maybe a_abS | [k_46[VV#45:=VV#F10][VV#71:=VV#F10][VV#F:=VV#F10]]}
  id 10 tag [2]


constraint:
  env [0; 1; 2; 3; 4; 20; 7; 8]
  grd true
  lhs {VV#F11 : a_abS | [k_37[VV#38:=VV#71][VV#36:=VV#F11][VV#F:=VV#F11]]}
  rhs {VV#F11 : a_abS | [k_44[VV#45:=VV#71][VV#43:=VV#F11][VV#F:=VV#F11]]}
  id 11 tag [2]


constraint:
  env [0; 1; 2; 3; 4]
  grd true
  lhs {VV#F12 : Maybe a_abQ | []}
  rhs {VV#F12 : Maybe a_abQ | [k_24[VV#23:=VV#F12][VV#73:=VV#F12][VV#F:=VV#F12]]}
  id 12 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 21]
  grd true
  lhs {VV#F13 : a_abQ | []}
  rhs {VV#F13 : a_abQ | [k_22[VV#23:=VV#73][VV#21:=VV#F13][VV#F:=VV#F13]]}
  id 13 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 22]
  grd true
  lhs {VV#F14 : Maybe a_abQ | []}
  rhs {VV#F14 : Maybe a_abQ | [k_29[hi#abI:=hi][VV#28:=VV#F14][VV#76:=VV#F14][VV#F:=VV#F14]]}
  id 14 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 22; 23]
  grd true
  lhs {VV#F15 : a_abQ | [((? isJust([hi])) => (VV#F15 <= fromJust([hi])))]}
  rhs {VV#F15 : a_abQ | [k_27[hi#abI:=hi][VV#28:=VV#76][VV#26:=VV#F15][VV#F:=VV#F15]]}
  id 15 tag [1]


wf:
  env [0; 1; 2; 3; 4]
  reft {VV#33 : Maybe a_abS | [k_34]}
  


wf:
  env [0; 1; 2; 3; 4; 26]
  reft {VV#31 : a_abS | [k_32]}
  


wf:
  env [0; 1; 2; 3; 4; 7]
  reft {VV#38 : Maybe a_abS | [k_39]}
  


wf:
  env [0; 1; 2; 3; 4; 7; 27]
  reft {VV#36 : a_abS | [k_37]}
  


wf:
  env [0; 1; 2; 3; 4; 7; 8; 9; 10]
  reft {VV#53 : a_abS | [k_54]}
  


wf:
  env [0; 1; 2; 3; 4; 7; 8; 9]
  reft {VV#50 : Maybe a_abS | [k_51]}
  


wf:
  env [0; 1; 2; 3; 4; 7; 8; 9; 28]
  reft {VV#48 : a_abS | [k_49]}
  


wf:
  env [0; 1; 2; 3; 4; 7; 8]
  reft {VV#45 : Maybe a_abS | [k_46]}
  


wf:
  env [0; 1; 2; 3; 4; 7; 8; 29]
  reft {VV#43 : a_abS | [k_44]}
  


wf:
  env [0; 1; 2; 3; 4; 7; 8]
  reft {VV#41 : Bool | [k_42]}
  


wf:
  env [0; 1; 2; 3; 4]
  reft {VV#23 : Maybe a_abQ | [k_24]}
  


wf:
  env [0; 1; 2; 3; 4; 31]
  reft {VV#21 : a_abQ | [k_22]}
  


wf:
  env [0; 1; 2; 3; 4; 5]
  reft {VV#28 : Maybe a_abQ | [k_29]}
  


wf:
  env [0; 32; 1; 2; 3; 4; 5]
  reft {VV#26 : a_abQ | [k_27]}
  

