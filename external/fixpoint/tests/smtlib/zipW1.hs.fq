//qualif NonNull(v: [a])        : (? (nonnull([v])))
//qualif Null(v: [a])           : (~ (? (nonnull([v]))))
//qualif EqNull(v:Bool, ~A: [a]): (Prop(v) <=> (? (nonnull([~A]))))

qualif IsEmp(v:Bool, ~A: [a]) : (Prop(v) <=> len([~A]) [ > ;  = ] 0)
qualif ListZ(v: [a])          : len([v]) [ = ; >= ; > ] 0 
qualif SameLen(v:[a], ~A:[b]) : len([v]) = len([~A]) 
qualif EqLen(v:int, ~A: [a])  : v = len([~A]) 
qualif LenEq(v:[a], ~A: int)  : ~A = len([v]) 
qualif LenAcc(v:int, ~A:[a], ~B: int): v = len([~A]) + ~B
qualif LenDiff(v:[a], ~A:int): len([v]) = (~A [ +; - ] 1)
//BOT: Do not delete EVER!

qualif Bot(v:@(0))    : 0 = 1 
qualif Bot(v:obj)     : 0 = 1 
qualif Bot(v:a)       : 0 = 1 
qualif Bot(v:bool)    : 0 = 1 
qualif Bot(v:int)     : 0 = 1 
qualif CmpZ(v:a)      : v [ < ; <= ; > ; >= ; = ; != ] 0
qualif Cmp(v:a,~A:a)  : v [ < ; <= ; > ; >= ; = ; != ] ~A
qualif One(v:int)     : v = 1
qualif True(v:bool)   : (? v) 
qualif False(v:bool)  : ~ (? v) 
qualif True1(v:Bool)   : Prop(v) 
qualif False1(v:Bool)  : ~ Prop(v) 


qualif Papp(v:a,~P:Pred a) : papp1(~P, v)
constant papp1 : func(2, [Pred @(0); @(1); bool])

qualif Papp2(v:a,~X:b,~P:Pred a b) : papp2(~P, v, ~X)
constant papp2 : func(4, [Pred @(0) @(1); @(2); @(3); bool])

constant Prop : func(0, [Bool; bool])
qualif Auto(VV : [b_ab7] , ~A0 : [a_ab6]): (len([VV]) = len([~A0]))
qualif Auto(VV : [c_ab8] , ~A0 : [a_ab6]): (len([VV]) = len([~A0]))
constant cmp : func(0, [Ordering; Ordering])
constant fromJust : func(1, [Maybe @(0); @(0)])
constant isJust : func(1, [Maybe @(0); bool])
constant len : func(1, [[@(0)]; int])
bind 0 LT#6S : {VV#10 : Ordering | [(cmp([VV#10]) = LT#6S)]}
bind 1 EQ#6U : {VV#11 : Ordering | [(cmp([VV#11]) = EQ#6U)]}
bind 2 GT#6W : {VV#14 : Ordering | [(cmp([VV#14]) = GT#6W)]}
bind 3 dummy..home.rjhala.research.liquidhaskell.include.ghc.list.lhs.716.24 : {VV#22 : a_ab6 | [k_23]}
bind 4 dummy..home.rjhala.research.liquidhaskell.include.ghc.list.lhs.716.29 : {VV#24 : b_ab7 | [k_25]}
bind 5 dummy.pos.zipw1.hs.3.19 : {VV : func(0, [a_ab6;
                                                b_ab7;
                                                c_ab8]) | []}
bind 6 VV#31 : {VV#31 : [a_ab6] | [(len([VV#31]) >= 0)]}
bind 7 xs : {VV#33 : [a_ab6] | [(len([VV#33]) >= 0)]}
bind 8 VV#34 : {VV#34 : [b_ab7] | [(len([VV#34]) = len([xs]));
                                   (len([VV#34]) >= 0)]}
bind 9 ys : {VV#36 : [b_ab7] | [(len([VV#36]) = len([xs]));
                                (len([VV#36]) >= 0)]}
bind 10 VV#37 : {VV#37 : [c_ab8] | [(len([VV#37]) = len([xs]));
                                    (len([VV#37]) >= 0)]}


constraint:
  env [0; 1; 2; 3; 4]
  grd true
  lhs {VV#F1 : c_ab8 | []}
  rhs {VV#F1 : c_ab8 | [k_27[VV#26:=VV#F1][VV#F:=VV#F1]]}
  id 1 tag [1]


constraint:
  env [0; 1; 2; 5; 6]
  grd true
  lhs {VV#F2 : a_ab6 | []}
  rhs {VV#F2 : a_ab6 | [k_23[dummy..home.rjhala.research.liquidhaskell.include.ghc.list.lhs.716.23:=dummy.pos.zipw1.hs.3.19][VV:=VV#31][VV#22:=VV#F2][VV#F:=VV#F2]]}
  id 2 tag [1]


constraint:
  env [0; 1; 2; 5; 7]
  grd true
  lhs {VV#F3 : [b_ab7] | [(len([VV#F3]) = len([xs]))]}
  rhs {VV#F3 : [b_ab7] | [(len([VV#F3]) = len([xs]))]}
  id 3 tag [1]


constraint:
  env [0; 1; 2; 5; 7; 8]
  grd true
  lhs {VV#F4 : b_ab7 | []}
  rhs {VV#F4 : b_ab7 | [k_25[dummy..home.rjhala.research.liquidhaskell.include.ghc.list.lhs.716.23:=dummy.pos.zipw1.hs.3.19][xs:=xs][VV:=VV#34][VV#24:=VV#F4][VV#F:=VV#F4]]}
  id 4 tag [1]


constraint:
  env [0; 1; 2; 5; 7; 9]
  grd true
  lhs {VV#F5 : [c_ab8] | [(len([VV#F5]) = len([xs]))]}
  rhs {VV#F5 : [c_ab8] | [(len([VV#F5]) = len([xs]))]}
  id 5 tag [1]


wf:
  env [0; 1; 2]
  reft {VV#26 : c_ab8 | [k_27]}
  


wf:
  env [0; 1; 2]
  reft {VV#24 : b_ab7 | [k_25]}
  


wf:
  env [0; 1; 2]
  reft {VV#22 : a_ab6 | [k_23]}
  

