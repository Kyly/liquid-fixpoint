//qualif NonNull(v: [a])        : (? (nonnull([v])))
//qualif Null(v: [a])           : (~ (? (nonnull([v]))))
//qualif EqNull(v:Bool, ~A: [a]): (Prop(v) <=> (? (nonnull([~A]))))

qualif IsEmp(v:Bool, ~A: [a]) : (Prop(v) <=> len([~A]) [ > ;  = ] 0)
qualif ListZ(v: [a])          : len([v]) [ = ; >= ; > ] 0 
qualif SameLen(v:[a], ~A:[b]) : len([v]) = len([~A]) 
qualif EqLen(v:int, ~A: [a])  : v = len([~A]) 
qualif LenEq(v:[a], ~A: int)  : ~A = len([v]) 
qualif LenAcc(v:int, ~A:[a], ~B: int): v = len([~A]) + ~B
qualif LenDiff(v:[a], ~A:int): len([v]) = (~A [ +; - ] 1)
//BOT: Do not delete EVER!

qualif Bot(v:@(0))    : 0 = 1 
qualif Bot(v:obj)     : 0 = 1 
qualif Bot(v:a)       : 0 = 1 
qualif Bot(v:bool)    : 0 = 1 
qualif Bot(v:int)     : 0 = 1 
qualif CmpZ(v:a)      : v [ < ; <= ; > ; >= ; = ; != ] 0
qualif Cmp(v:a,~A:a)  : v [ < ; <= ; > ; >= ; = ; != ] ~A
qualif One(v:int)     : v = 1
qualif True(v:bool)   : (? v) 
qualif False(v:bool)  : ~ (? v) 
qualif True1(v:Bool)   : Prop(v) 
qualif False1(v:Bool)  : ~ Prop(v) 


qualif Papp(v:a,~P:Pred a) : papp1(~P, v)
constant papp1 : func(2, [Pred @(0); @(1); bool])

qualif Papp2(v:a,~X:b,~P:Pred a b) : papp2(~P, v, ~X)
constant papp2 : func(4, [Pred @(0) @(1); @(2); @(3); bool])

constant Prop : func(0, [Bool; bool])
qualif Auto(vv : int , ~A0 : int): (vv = ~A0)
qualif Auto(VV : int): (VV = 0)
qualif Auto(vv : int): (vv = 0)
qualif Auto(v : a_aa9 , ~P : Pred a_aa9   int , ~A0 : int): (? papp2([~P;
                                                                      v;
                                                                      ~A0]))
qualif Auto(v : a_aa9 , ~P : Pred a_aa9   int): (? papp2([~P;
                                                          v;
                                                          0]))
qualif Auto(v : a_aa9 , ~P : Pred a_aa9   int): (? papp2([~P;
                                                          v;
                                                          0]))
constant cmp : func(0, [Ordering; Ordering])
constant fromJust : func(1, [Maybe @(0); @(0)])
constant isJust : func(1, [Maybe @(0); bool])
constant len : func(1, [[@(0)]; int])
bind 0 GT#6W : {VV#1 : Ordering | [(cmp([VV#1]) = GT#6W)]}
bind 1 LT#6S : {VV#12 : Ordering | [(cmp([VV#12]) = LT#6S)]}
bind 2 EQ#6U : {VV#14 : Ordering | [(cmp([VV#14]) = EQ#6U)]}
bind 3 p : {VV#15 : Pred a_aa9   int | []}
bind 4 x0 : {VV#16 : int | []}
bind 5 f#aa6 : {VV : func(0, [int; a_aa9]) | []}
bind 6 i#aa7 : {VV#23 : int | [k_24]}
bind 7 VV#26 : {VV#26 : int | [k_19[VV#18:=VV#26]]}
bind 8 lq_tmp_x17 : {VV#18 : int | [k_19]}
bind 9 dummy.pos.pargs.hs.4.14 : {VV : func(0, [int; a_aa9]) | []}
bind 10 VV#30 : {VV#30 : int | [(VV#30 = 0)]}
bind 11 dummy.pos.pargs.hs.4.35 : {VV#32 : int | [(VV#32 = 0)]}
bind 12 VV#33 : {VV#33 : int | [k_24[VV#23:=VV#33];
                                (VV#33 = i#aa7)]}
bind 13 VV#18 : {VV#18 : int | [k_19]}
bind 14 lq_tmp_x17 : {VV#18 : int | [k_19]}
bind 15 VV#23 : {VV#23 : int | [k_24]}


constraint:
  env [0; 1; 2; 3; 4; 8]
  grd true
  lhs {VV#F1 : a_aa9 | [(? papp2([p; VV#F1; lq_tmp_x17]))]}
  rhs {VV#F1 : a_aa9 | [k_21[VV#20:=VV#F1][VV#F:=VV#F1]]}
  id 1 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 9]
  grd true
  lhs {VV#F2 : int | [(VV#F2 = 0)]}
  rhs {VV#F2 : int | [k_24[f#aa6:=dummy.pos.pargs.hs.4.14][VV#23:=VV#F2][VV#30:=VV#F2][VV#F:=VV#F2]]}
  id 2 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 9; 11]
  grd true
  lhs {VV#F3 : a_aa9 | [k_21[lq_tmp_x17:=dummy.pos.pargs.hs.4.35][f#aa6:=dummy.pos.pargs.hs.4.14][i#aa7:=dummy.pos.pargs.hs.4.35][VV#20:=VV#F3][VV#F:=VV#F3]]}
  rhs {VV#F3 : a_aa9 | [(? papp2([p; VV#F3; 0]))]}
  id 3 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 5; 6]
  grd true
  lhs {VV#F4 : int | [k_24[VV#23:=VV#F4][VV#33:=VV#F4][VV#F:=VV#F4];
                      (VV#F4 = i#aa7)]}
  rhs {VV#F4 : int | [k_19[VV#18:=VV#F4][VV#33:=VV#F4][VV#F:=VV#F4]]}
  id 4 tag [1]


wf:
  env [0; 1; 2; 3; 4]
  reft {VV#18 : int | [k_19]}
  


wf:
  env [0; 1; 2; 3; 4; 14]
  reft {VV#20 : a_aa9 | [k_21]}
  


wf:
  env [0; 1; 2; 3; 4; 5]
  reft {VV#23 : int | [k_24]}
  

