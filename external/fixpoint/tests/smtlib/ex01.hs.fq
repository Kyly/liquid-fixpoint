//qualif NonNull(v: [a])        : (? (nonnull([v])))
//qualif Null(v: [a])           : (~ (? (nonnull([v]))))
//qualif EqNull(v:Bool, ~A: [a]): (Prop(v) <=> (? (nonnull([~A]))))

qualif IsEmp(v:Bool, ~A: [a]) : (Prop(v) <=> len([~A]) [ > ;  = ] 0)
qualif ListZ(v: [a])          : len([v]) [ = ; >= ; > ] 0 
qualif SameLen(v:[a], ~A:[b]) : len([v]) = len([~A]) 
qualif EqLen(v:int, ~A: [a])  : v = len([~A]) 
qualif LenEq(v:[a], ~A: int)  : ~A = len([v]) 
qualif LenAcc(v:int, ~A:[a], ~B: int): v = len([~A]) + ~B
qualif LenDiff(v:[a], ~A:int): len([v]) = (~A [ +; - ] 1)
//BOT: Do not delete EVER!

qualif Bot(v:@(0))    : 0 = 1 
qualif Bot(v:obj)     : 0 = 1 
qualif Bot(v:a)       : 0 = 1 
qualif Bot(v:bool)    : 0 = 1 
qualif Bot(v:int)     : 0 = 1 
qualif CmpZ(v:a)      : v [ < ; <= ; > ; >= ; = ; != ] 0
qualif Cmp(v:a,~A:a)  : v [ < ; <= ; > ; >= ; = ; != ] ~A
qualif One(v:int)     : v = 1
qualif True(v:bool)   : (? v) 
qualif False(v:bool)  : ~ (? v) 
qualif True1(v:Bool)   : Prop(v) 
qualif False1(v:Bool)  : ~ Prop(v) 


qualif Papp(v:a,~P:Pred a) : papp1(~P, v)
constant papp1 : func(2, [Pred @(0); @(1); bool])

qualif Papp2(v:a,~X:b,~P:Pred a b) : papp2(~P, v, ~X)
constant papp2 : func(4, [Pred @(0) @(1); @(2); @(3); bool])

constant Prop : func(0, [Bool; bool])
qualif Auto(vv : Vec a_aaM): (vv = Nil#r9H([]))
qualif Auto(vv : Vec a_aaM , ~A0 : Vec a_aaM): (vv = ~A0)
qualif Auto(v : b_aaL , ~P : Pred b_aaL   (Vec a_aaM)): (? papp2([~P;
                                                                  v;
                                                                  Nil#r9H([])]))
qualif Auto(v : b_aaL , ~P : Pred b_aaL   (Vec a_aaM) , ~A0 : Vec a_aaM): (? papp2([~P;
                                                                                    v;
                                                                                    ~A0]))
constant cmp : func(0, [Ordering; Ordering])
constant fromJust : func(1, [Maybe @(0); @(0)])
constant isJust : func(1, [Maybe @(0); bool])
constant len : func(1, [[@(0)]; int])
constant Nil#r9H : func(1, [Vec @(0)])
bind 0 LT#6S : {VV#4 : Ordering | [(cmp([VV#4]) = LT#6S)]}
bind 1 EQ#6U : {VV#5 : Ordering | [(cmp([VV#5]) = EQ#6U)]}
bind 2 GT#6W : {VV#8 : Ordering | [(cmp([VV#8]) = GT#6W)]}
bind 3 p : {VV#16 : Pred b_aaL   (Vec a_aaM) | []}
bind 4 x0 : {VV#17 : Vec a_aaM | []}
bind 5 b#aaF : {VV#18 : b_aaL | [k_19]}
bind 6 ds_daP : {VV#23 : Vec a_aaM | [k_24]}
bind 7 lq_anf__daR : {VV#23 : Vec a_aaM | [k_24; (VV#23 = ds_daP)]}
bind 8 lq_anf__daR : {VV#23 : Vec a_aaM | [k_24;
                                           (VV#23 = ds_daP);
                                           (VV#23 = Nil#r9H([]))]}
bind 9 dummy.pos.ex01.hs.14.15 : {VV : b_aaL | [(? papp2([p;
                                                          VV;
                                                          Nil#r9H([])]))]}
bind 10 VV#31 : {VV#31 : Vec a_aaM | []}
bind 11 ys : {VV#33 : Vec a_aaM | []}
bind 12 VV#23 : {VV#23 : Vec a_aaM | [k_24]}


constraint:
  env [0; 1; 2; 3; 4]
  grd true
  lhs {VV#F1 : b_aaL | [(? papp2([p; VV#F1; Nil#r9H([])]))]}
  rhs {VV#F1 : b_aaL | [k_19[VV#18:=VV#F1][VV#F:=VV#F1]]}
  id 1 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 9]
  grd true
  lhs {VV#F2 : Vec a_aaM | []}
  rhs {VV#F2 : Vec a_aaM | [k_24[b#aaF:=dummy.pos.ex01.hs.14.15][VV#23:=VV#F2][VV#31:=VV#F2][VV#F:=VV#F2]]}
  id 2 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 9; 10]
  grd true
  lhs {VV#F3 : a_aaM | []}
  rhs {VV#F3 : a_aaM | [k_22[b#aaF:=dummy.pos.ex01.hs.14.15][VV#23:=VV#31][VV#21:=VV#F3][VV#F:=VV#F3]]}
  id 3 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 9; 11]
  grd true
  lhs {VV#F4 : b_aaL | [k_27[b#aaF:=dummy.pos.ex01.hs.14.15][ds_daP:=ys][VV#26:=VV#F4][VV#F:=VV#F4]]}
  rhs {VV#F4 : b_aaL | [(? papp2([p; VV#F4; ys]))]}
  id 4 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 8]
  grd true
  lhs {VV#F5 : b_aaL | [k_19[VV#18:=VV#F5][VV#F:=VV#F5];
                        (VV#F5 = b#aaF)]}
  rhs {VV#F5 : b_aaL | [k_27[VV#26:=VV#F5][VV#F:=VV#F5]]}
  id 5 tag [1]


wf:
  env [0; 1; 2; 3; 4]
  reft {VV#18 : b_aaL | [k_19]}
  


wf:
  env [0; 1; 2; 3; 4; 5]
  reft {VV#23 : Vec a_aaM | [k_24]}
  


wf:
  env [0; 1; 2; 3; 4; 5; 12]
  reft {VV#21 : a_aaM | [k_22]}
  


wf:
  env [0; 1; 2; 3; 4; 5; 6]
  reft {VV#26 : b_aaL | [k_27]}
  

