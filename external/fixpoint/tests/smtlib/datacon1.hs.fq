//qualif NonNull(v: [a])        : (? (nonnull([v])))
//qualif Null(v: [a])           : (~ (? (nonnull([v]))))
//qualif EqNull(v:Bool, ~A: [a]): (Prop(v) <=> (? (nonnull([~A]))))

qualif IsEmp(v:Bool, ~A: [a]) : (Prop(v) <=> len([~A]) [ > ;  = ] 0)
qualif ListZ(v: [a])          : len([v]) [ = ; >= ; > ] 0 
qualif SameLen(v:[a], ~A:[b]) : len([v]) = len([~A]) 
qualif EqLen(v:int, ~A: [a])  : v = len([~A]) 
qualif LenEq(v:[a], ~A: int)  : ~A = len([v]) 
qualif LenAcc(v:int, ~A:[a], ~B: int): v = len([~A]) + ~B
qualif LenDiff(v:[a], ~A:int): len([v]) = (~A [ +; - ] 1)
//BOT: Do not delete EVER!

qualif Bot(v:@(0))    : 0 = 1 
qualif Bot(v:obj)     : 0 = 1 
qualif Bot(v:a)       : 0 = 1 
qualif Bot(v:bool)    : 0 = 1 
qualif Bot(v:int)     : 0 = 1 
qualif CmpZ(v:a)      : v [ < ; <= ; > ; >= ; = ; != ] 0
qualif Cmp(v:a,~A:a)  : v [ < ; <= ; > ; >= ; = ; != ] ~A
qualif One(v:int)     : v = 1
qualif True(v:bool)   : (? v) 
qualif False(v:bool)  : ~ (? v) 
qualif True1(v:Bool)   : Prop(v) 
qualif False1(v:Bool)  : ~ Prop(v) 


qualif Papp(v:a,~P:Pred a) : papp1(~P, v)
constant papp1 : func(2, [Pred @(0); @(1); bool])

qualif Papp2(v:a,~X:b,~P:Pred a b) : papp2(~P, v, ~X)
constant papp2 : func(4, [Pred @(0) @(1); @(2); @(3); bool])

constant Prop : func(0, [Bool; bool])
constant cmp : func(0, [Ordering; Ordering])
constant fromJust : func(1, [Maybe @(0); @(0)])
constant isJust : func(1, [Maybe @(0); bool])
constant len : func(1, [[@(0)]; int])
constant F#r9H : func(1, [@(0); @(0); @(0); Foo @(0)])
bind 0 I##6c : {VV : func(0, [int; int]) | []}
bind 1 I##6c : {VV : func(0, [int; int]) | []}
bind 2 LT#6S : {VV#7 : Ordering | [(cmp([VV#7]) = LT#6S)]}
bind 3 EQ#6U : {VV#9 : Ordering | [(cmp([VV#9]) = EQ#6U)]}
bind 4 GT#6W : {VV#10 : Ordering | [(cmp([VV#10]) = GT#6W)]}
bind 5 lq_anf__dbw : {VV#25 : int | [(VV#25 = (1  :  int))]}
bind 6 lq_anf__dbx : {VV#26 : int | [(VV#26 = (2  :  int))]}
bind 7 lq_anf__dby : {VV#27 : int | [(VV#27 = (3  :  int))]}
bind 8 z#r9I : {VV#23 : Foo int | [k_24]}
bind 9 VV#31 : {VV#31 : Foo int | []}
bind 10 VV#33 : {VV#33 : int | [k_29[lq_tmp_x1:=lq_anf__dbw][lq_tmp_x2:=lq_anf__dbx][lq_tmp_x3:=lq_anf__dby][VV:=VV#31][VV#28:=VV#33]]}
bind 11 VV#35 : {VV#35 : int | [(VV#35 = (3  :  int));
                                (VV#35 = lq_anf__dby)]}
bind 12 VV#37 : {VV#37 : int | [(VV#37 = (2  :  int));
                                (VV#37 = lq_anf__dbx)]}
bind 13 VV#39 : {VV#39 : int | [(VV#39 = (1  :  int));
                                (VV#39 = lq_anf__dbw)]}
bind 14 VV#41 : {VV#41 : int | [(VV#41 = 3)]}
bind 15 VV#43 : {VV#43 : int | [(VV#43 = 2)]}
bind 16 VV#45 : {VV#45 : int | [(VV#45 = 1)]}
bind 17 VV#28 : {VV#28 : int | [k_29]}
bind 18 VV#23 : {VV#23 : Foo int | [k_24]}
bind 19 VV#21 : {VV#21 : int | [k_22]}


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7]
  grd true
  lhs {VV#F1 : Foo int | []}
  rhs {VV#F1 : Foo int | [k_24[VV#23:=VV#F1][VV#31:=VV#F1][VV#F:=VV#F1]]}
  id 1 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7; 9]
  grd true
  lhs {VV#F2 : int | [k_29[lq_tmp_x1:=lq_anf__dbw][lq_tmp_x2:=lq_anf__dbx][lq_tmp_x3:=lq_anf__dby][VV:=VV#31][VV#28:=VV#F2][VV#33:=VV#F2][VV#F:=VV#F2]]}
  rhs {VV#F2 : int | [k_22[VV#23:=VV#31][VV#21:=VV#F2][VV#33:=VV#F2][VV#F:=VV#F2]]}
  id 2 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7]
  grd true
  lhs {VV#F3 : int | [(VV#F3 = (3  :  int)); (VV#F3 = lq_anf__dby)]}
  rhs {VV#F3 : int | [k_29[lq_tmp_x1:=lq_anf__dbw][lq_tmp_x2:=lq_anf__dbx][VV#28:=VV#F3][VV#35:=VV#F3][VV#F:=VV#F3]]}
  id 3 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7]
  grd true
  lhs {VV#F4 : int | [(VV#F4 = (2  :  int)); (VV#F4 = lq_anf__dbx)]}
  rhs {VV#F4 : int | [k_29[lq_tmp_x1:=lq_anf__dbw][VV#28:=VV#F4][VV#37:=VV#F4][VV#F:=VV#F4]]}
  id 4 tag [1]


constraint:
  env [0; 1; 2; 3; 4; 5; 6; 7]
  grd true
  lhs {VV#F5 : int | [(VV#F5 = (1  :  int)); (VV#F5 = lq_anf__dbw)]}
  rhs {VV#F5 : int | [k_29[VV#28:=VV#F5][VV#39:=VV#F5][VV#F:=VV#F5]]}
  id 5 tag [1]


wf:
  env [0; 1; 2; 3; 4; 5; 6; 7]
  reft {VV#28 : int | [k_29]}
  


wf:
  env [0; 1; 2; 3; 4]
  reft {VV#23 : Foo int | [k_24]}
  


wf:
  env [0; 1; 2; 18; 3; 4]
  reft {VV#21 : int | [k_22]}
  

